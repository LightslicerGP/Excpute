x = 0
y = 1
r2 = 2
r3 = 3
r4 = 4
rSP = 5
rFlags = 6
rPC = 7

r_col = 0
g_col = 1
b_col = 2
x_coord = 3
y_coord = 4
set_px = 5
reset_px = 6
fill = 7

on = 255
off = 0

# temp load x value
ldi x 128
spd x x_coord
# temp load y value
ldi y 128
spd y y_coord

loop:

    # check movement w
    pti 1 r2
    ldi r3 0b00000001
    and r2 r3
    xor r2 r3
    jiz r2 decrease_y

    # check movement up
    pti 6 r2
    ldi r3 0b00001000
    and r2 r3
    xor r2 r3
    jiz r2 decrease_y
decreased_y:

    # check movement s
    pti 3 r2
    ldi r3 0b00001000
    and r2 r3
    xor r2 r3
    jiz r2 increase_y
    
    # check movement down
    pti 6 r2
    ldi r3 0b00000010
    and r2 r3
    xor r2 r3
    jiz r2 increase_y
increased_y:



    # check movement a
    pti 3 r2
    ldi r3 0b00010000
    and r2 r3
    xor r2 r3
    jiz r2 decrease_x

    # check movement left
    pti 6 r2
    ldi r3 0b00000100
    and r2 r3
    xor r2 r3
    jiz r2 decrease_x
decreased_x:

    # check movement d
    pti 3 r2
    ldi r3 0b00000100
    and r2 r3
    xor r2 r3
    jiz r2 increase_x
    
    # check movement right
    pti 6 r2
    ldi r3 0b00000001
    and r2 r3
    xor r2 r3
    jiz r2 increase_x
increased_x:
    
    # clear display
    ldi r2 off
    spd r2 r_col
    spd r2 g_col
    spd r2 b_col
    spd r2 fill

    # set pixel
    spd y y_coord
    spd x x_coord
    ldi r2 on
    spd r2 r_col
    spd r2 g_col
    spd r2 b_col
    spd r2 set_px
    ldi r4 10
    # cal delay_loop
    jmp loop


increase_y:
    inc y
    jmp increased_y

decrease_y:
    dec y
    jmp decreased_y


increase_x:
    inc x
    jmp increased_x

decrease_x:
    dec x
    jmp decreased_x














delay:
    psh r4
    ldi r4 255
delay_loop:
    dec r4
    jiz r4 exit_delay
    jmp delay_loop
exit_delay:
    pop r4
    rtn